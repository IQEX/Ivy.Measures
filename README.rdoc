= uomnet

Simple C# framework to support Units of Measurement

Copyright 2011 (c) Anders Gustafsson, Cureos AB.
Made available under Eclipse Public License, version 1.0.

== Introduction

Developed with Visual Studio 2010, using .NET Frameworks 3.5 and 4.0. Corresponding Silverlight class library included in solution. Can also be used by Mono, at least versions 2.8 and later.

Measure<Q> and StandardMeasure<Q> are the main "work-horses" of the library. StandardMeasure<Q> is always represented in the reference unit of the associated quantity. If a different unit is specified in instantiation of StandardMeasure<Q>, the measured amount is automatically converted to the equivalent reference unit amount. On the other hand, the amount and unit used in instantiation of Measure<Q> are internally maintained.

StandardMeasure<Q> is declared as a struct and only holds one member, the amount. The main goal of this approach is to maximize calculation performance, while at the same time ensuring quantity type safety.

There is also a StandardMeasureArray<Q> that holds an array of floating-point amounts given in the standard unit of the specified quantity.


== Usage examples

  using Cureos.Measures;
  using Cureos.Measures.Quantities;
  ...

  StandardMeasure<Mass> initialWgt = new StandardMeasure<Mass>(75.0);
  StandardMeasure<Mass> gainedWgt = new StandardMeasure<Mass>(2.5, Mass.HectoGram);
  StandardMeasure<Mass> newWgt = initialWgt + gainedWgt;

  Measure<Mass> newWgtInGram = newWgt[Mass.Gram];
  Measure<Mass> initialWgtInGram = newWgtInGram - gainedWgt;

  Console.WriteLine("Initial weight: {0}", initialWgtInGram);

  Measure<Length> height = new Measure<Length>(30.0, Length.CentiMeter);
  StandardMeasure<Area> area = (StandardMeasure<Area>)0.02;

  StandardMeasure<Volume> vol; 
  ArithmeticOperations.Times(height, area, out vol);
  var maxVol = new StandardMeasure<Volume>(10.0, Volume.Liter);

  if (vol < maxVol)
  {
    Console.WriteLine("Calculated volume is within limits, actual volume: {0}", vol[Volume.Liter]);
  }

should yield the output:

  Initial weight: 75000 g
  Calculated volume is within limits, actual volume 6 l


== Application

For pure demonstration and testing purposes, there is a very simple Silverlight 4-based unit converter application included in the solution, SilverlightUnitConverter, accessible [here][SL]. Implementation of this application was inspired by Andrew Cheng's feedback and usage of uomnet in his [Windows Forms application][WF].


== Revision

Last updated on March 25, 2011 by Anders Gustafsson, anders[at]cureos[dot]com.


[SL]: http://www.cureos.com/uomnet "Simplistic unit converter for Silverlight 4"
[WF]: https://github.com/hamxiaoz/cureos.uomnet.tests.winform "Andrew Cheng's Winform unit converter"