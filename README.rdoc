= uomnet

Simple C# framework to support Units of Measurement

Copyright 2011 (c) Anders Gustafsson, Cureos AB.
Made available under Eclipse Public License, version 1.0.

== Introduction

Developed with Visual Studio 2010, using .NET Framework 3.5. Can also be used by Mono, at least versions 2.8 and later.

Measure<Q> and ReferenceMeasure<Q> are the main "work-horses" of the library. ReferenceMeasure<Q> is always represented in the reference unit of the associated quantity. If a different unit is specified in instantiation of ReferenceMeasure<Q>, the measured amount is automatically converted to the equivalent reference unit amount. On the other hand, the amount and unit used in instantiation of Measure<Q> are internally maintained.

ReferenceMeasure<Q> is declared as a struct and only holds one member, the amount. The main goal of this approach is to maximize calculation performance, while at the same time ensuring quantity type safety.


== Usage examples

 using Cureos.Measures;
 using Cureos.Measures.Quantities;
 ...

 ReferenceMeasure<Mass> initialWgt = new ReferenceMeasure<Mass>(75.0);
 ReferenceMeasure<Mass> gainedWgt = new ReferenceMeasure<Mass>(2.5, Units.HectoGram);
 ReferenceMeasure<Mass> newWgt = initialWgt + gainedWgt;

 Measure<Mass> newWgtInGram = newWgt[Units.Gram];
 Measure<Mass> initialWgtInGram = newWgtInGram - gainedWgt;

 Console.WriteLine("Initial weight: {0}", initialWgtInGram);

 Measure<Length> height = new Measure<Length>(30.0, Units.CentiMeter);
 ReferenceMeasure<Area> area = (ReferenceMeasure<Area>)0.02;

 var vol = ReferenceMeasure<Volume>.Times(height, area);
 var maxVol = new ReferenceMeasure<Volume>(10.0, Units.Liter);

 if (vol < maxVol)
 {
  Console.WriteLine("Calculated volume is within limits, actual volume: {0}", vol[Units.Liter]);
 }

should yield the output:

 Initial weight: 75000 g
 Calculated volume is within limits, actual volume 6 l


== Building for specific floating-point types

With preprocessor directives, it is possible to configure the library so that the measure amounts are defined in a desired floating-point value type. The following preprocessor directives are currently supported, and can be defined in the project build settings:

[DOUBLE] Set amount type to System.Double

[SINGLE] Set amount type to System.Single

[DECIMAL] Set amount type to System.Decimal


== Extending the library

Quantities are identified through their dimension in terms of SI Base Units. For completeness, each quantity should have a reference unit, expressable as a combination of one or more SI base units. This is particularly important to ensure that resulting amounts are correctly expressed when multiplying or dividing measures.

To extend the library with additional quantities and associated units, the following steps should be taken in project Cureos.Measures:

* In the Quantities sub-folder, add a new member-less struct implementing the IQuantity interface, and have the Dimensions property getter return the dimension signature of the new quantity:

   namespace Cureos.Measures.Quantities
   {
    public struct Energy : IQuantity<Energy>
    {
     private static readonly QuantityDimensions _dimensions = new QuantityDimensions(2, 1, -2, 0, 0, 0, 0);

     public QuantityDimensions Dimensions { get { return _dimensions; } }
     public IUnit<Energy> ReferenceUnit { get { return REFERENCE_UNIT_DEFINED_IN_NEXT_STEP; } }
    }
   }

* In the file Units.cs, add the unit(s) associated with the quantity to the list of supported fields:

   public static class Units
   {
    ... ;
    public static readonly Unit<Energy> Joule = new Unit<Energy>("J");
    public static readonly Unit<Energy> KiloJoule = new Unit<Energy>("kJ", Scales.Kilo);
   }

* Insert the reference unit instance (in this case, Units.Joule) in the ReferenceUnit property getter of the new quantity type:

    public struct Energy : IQuantity<Energy>
    {
     ...
	 public IUnit<Energy> ReferenceUnit { get { return Units.Joule; } }
    }


== Revision

Last updated on March 8, 2011 by Anders Gustafsson, anders[at]cureos[dot]com.
