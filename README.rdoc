= uomnet

Simple C# framework to support Units of Measurement

Copyright 2011 (c) Anders Gustafsson, Cureos AB
Made available under Eclipse Public License, version 1.0

== Usage examples

 using Cureos.Measures;
 using Cureos.Measures.Quantities;
 ...

 Measure<Mass> initialWgt = new Measure<Mass>(75.0);
 Measure<Mass> gainedWgt = new Measure<Mass>(2.5, Unit.Gram);
 Measure<Mass> newWgt = initialWgt + gainedWgt;

 Measure newWgtInGram = newWgt[Unit.Gram];
 Measure initialWgtInGram = newWgtInGram - gainedWgt;

 Console.WriteLine("Initial weight: {0}", initialWgtInGram);

 Measure<Length> height = new Measure<Length>(30.0, Unit.CentiMeter);
 Measure<Area> area = (Measure<Area>)0.02;

 var vol = Measure<Volume>.Times(height, area);
 var maxVol = new Measure<Volume>(10.0, Unit.Liter);

 if (vol < maxVol)
 {
  Console.WriteLine("Calculated volume is within limits, actual volume: {0} liters", vol.GetAmount(Unit.Liter));
 }

should yield the output:

 Initial weight: 75000 g
 Calculated volume is within limits, actual volume 6 liters


== Remarks

Developed with Visual Studio 2010, using .NET Framework 3.5.

The "work-horses" Measure and Measure<Q> are declared as structs. The main goal of this approach is to maximize calculation performance, while at the same time ensuring quantity type safety. In contrast, operations involving unit exposure or conversions are more costly due to dictionary look-up operations.


== Building for specific floating-point types

With preprocessor directives, it is possible to configure the library so that the measure amounts are defined in a desired floating-point value type. The following preprocessor directives are currently supported, and can be defined in the project build settings:

[DOUBLE] Set amount type to System.Double

[SINGLE] Set amount type to System.Single

[DECIMAL] Set amount type to System.Decimal


== Extending the library

Quantities are identified through their dimension in terms of SI Base Units. For completeness, each quantity should have a reference unit, expressable as a combination of one or more SI base units. This is particularly important to ensure that resulting amounts are correctly erxpressed when multiplying or dividing measures.

To extend the library with additional quantities and associated units, the following steps should be taken in project Cureos.Measures:

* In the file Quantity.cs, add the new quantity to the enumeration:

   public enum Quantity
   {
    ... ,
    Energy
   }

* In the file QuantityExtensions.cs, static constructor, add the new quantity to the quantity details dictionary:

   smDetailsMap = new List<QuantityDetails>
   {
    ... ,
    new QuantityDetails(Quantity.Energy, new QuantityDimensions(2, 1, -2, 0, 0, 0, 0))
   }

* In the Quantities sub-folder, add a new member-less struct implementing the IQuantity interface, and have the Value property getter return the enumerated value of the new quantity:

   namespace Cureos.Measures.Quantities
   {
    public struct Energy : IQuantity
    {
     public Quantity Value { get { return Quantity.Energy; } }
    }
   }

* In the file Unit.cs, add the unit(s) associated with the quantity to the enumeration:

   public enum Unit
   {
    ... ,
    Joule,
    KiloJoule
   }

* In the file UnitExtensions.cs, static constructor, add the new units to the unit details dictionary. The reference unit (in the example, Joule) uses a UnitDetails constructor without amount conversion specifications, whereas the secondary units are initialized using amount conversion factors/operators to and from the reference unit:

   smUnitDetailsMap = new UnitDetails[]
   {
    ... ,
    new UnitDetails(Unit.Joule, Quantity.Energy, "J"),
    new UnitDetails(Unit.KiloJoule, Quantity.Energy, "kJ", (AmountType) 1000.0)
   }


== Revision

Last updated on March 4, 2011 by Anders Gustafsson, anders[at]cureos[dot]com.
