<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>quantity</Title>
      <Author>Anders Gustafsson, Cureos AB</Author>
      <Description>Convenience snippet for creating a struct implementing the IQuantity&lt;Q&gt; interface in the uomnet library</Description>
      <HelpUrl></HelpUrl>
      <SnippetTypes />
      <Keywords />
      <Shortcut>quantity</Shortcut>
    </Header>
    <Snippet>
      <References />
      <Imports />
      <Declarations>
        <Literal Editable="true">
          <ID>DESCRIPTION</ID>
          <Type></Type>
          <ToolTip>Enter short description of quantity</ToolTip>
          <Default>specific</Default>
          <Function></Function>
        </Literal>
        <Literal Editable="true">
          <ID>QUANTITY</ID>
          <Type></Type>
          <ToolTip>Enter quantity struct name</ToolTip>
          <Default>SpecificQuantity</Default>
          <Function></Function>
        </Literal>
        <Literal Editable="true">
          <ID>Q1</ID>
          <Type></Type>
          <ToolTip>Enter base quantity 1</ToolTip>
          <Default>BaseQuantity</Default>
          <Function />
        </Literal>
        <Literal Editable="true">
          <ID>Q2</ID>
          <Type />
          <ToolTip>Enter base quantity 2</ToolTip>
          <Default>BaseQuantity</Default>
          <Function />
        </Literal>
        <Literal Editable="true">
          <ID>STDUNIT</ID>
          <Type />
          <ToolTip>Enter quantity's standard unit</ToolTip>
          <Default>SpecificUnit</Default>
          <Function></Function>
        </Literal>
        <Literal Editable="true">
          <ID>SUSYMBOL</ID>
          <Type />
          <ToolTip>Enter symbol associated with the standard unit</ToolTip>
          <Default>Unit</Default>
          <Function />
        </Literal>
        <Object Editable="true">
          <ID>E1</ID>
          <Type>int</Type>
          <ToolTip>Enter dimension of base quantity 1</ToolTip>
          <Default>1</Default>
          <Function />
        </Object>
        <Object Editable="true">
          <ID>E2</ID>
          <Type>int</Type>
          <ToolTip>Enter dimension of base quantity 2</ToolTip>
          <Default>1</Default>
          <Function />
        </Object>
      </Declarations>
      <Code Language="csharp" Kind="type decl" Delimiter="$"><![CDATA[// Copyright (c) 2011 Anders Gustafsson, Cureos AB.
// All rights reserved. This software and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html

namespace Cureos.Measures.Quantities
{
	/// <summary>
	/// Implementation of the $DESCRIPTION$ quantity
	/// </summary>
	public struct $QUANTITY$ : IQuantity<$QUANTITY$>
	{
		#region FIELDS
		
		private static readonly QuantityDimension _dimension = 
			(QuantityDimension.$Q1$ ^ $E1$) * (QuantityDimension.$Q2$ ^ $E2$);

		public static readonly Unit<$QUANTITY$> $STDUNIT$ = new Unit<$QUANTITY$>("$SUSYMBOL$");
		public static readonly Unit<$QUANTITY$> Kilo$STDUNIT$ = new Unit<$QUANTITY$>(UnitPrefix.Kilo);
		public static readonly Unit<$QUANTITY$> Mega$STDUNIT$= new Unit<$QUANTITY$>(UnitPrefix.Mega);
		public static readonly Unit<$QUANTITY$> Giga$STDUNIT$ = new Unit<$QUANTITY$>(UnitPrefix.Giga);
		public static readonly Unit<$QUANTITY$> Milli$STDUNIT$ = new Unit<$QUANTITY$>(UnitPrefix.Milli);
		public static readonly Unit<$QUANTITY$> Micro$STDUNIT$ = new Unit<$QUANTITY$>(UnitPrefix.Micro);
		public static readonly Unit<$QUANTITY$> Nano$STDUNIT$ = new Unit<$QUANTITY$>(UnitPrefix.Nano);

		#endregion

		#region Implementation of IQuantity<$QUANTITY$>

		/// <summary>
		/// Gets the physical dimension of the quantity in terms of SI units
		/// </summary>
		public QuantityDimension Dimension
		{
			get { return _dimension; }
		}

		/// <summary>
		/// Gets the standard unit associated with the quantity
		/// </summary>
		IUnit IQuantity.StandardUnit
		{
			get { return StandardUnit; }
		}

		/// <summary>
		/// Gets the standard unit associated with the quantity
		/// </summary>
		public IUnit<$QUANTITY$> StandardUnit
		{
			get { return $STDUNIT$; }
		}

		#endregion

        #region METHODS

        /// <summary>
        /// Returns the fully qualified type name of this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"/> containing a fully qualified type name.
        /// </returns>
        /// <filterpriority>2</filterpriority>
        public override string ToString()
        {
            return GetType().Name;
        }

        #endregion
    }
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>