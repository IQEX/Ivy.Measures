<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
    if (!string.IsNullOrWhiteSpace(ClassName)) {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, "T4", "Operators.csv");
        var lines=File.ReadAllLines(outputFilePath);

        var line = lines
                    .Where(s => !String.IsNullOrWhiteSpace(s) && !s.Trim().StartsWith("//"))
                    .SingleOrDefault(s => s.Substring(0, s.IndexOf(',')).Equals(ClassName));

		var opNames = new Dictionary<string, string>() { { "*", "multiplication" }, { "/", "division" } };

        if (line != null) {
            var values=line.Split(',');
            var displayName = DisplayName;
            var displayNameLower = displayName.ToLowerInvariant();
            var operations = values.Skip(1).Select(s => s.Trim()).ToList();
#>/*
 *  Copyright (c) 2011-2015, Cureos AB.
 *  All rights reserved.
 *  http://www.cureos.com
 *
 *	This file is part of CSUnits.
 *
 *  CSUnits is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  CSUnits is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with CSUnits. If not, see http://www.gnu.org/licenses/.
 */

/*
 * This file is auto-generated.
 */

namespace Cureos.Measures.Quantities
{
    /// <summary>
    /// Multiplicative operators for the <#= displayNameLower #> quantity
    /// </summary>
    public partial struct <#= ClassName #>
    {
        #region OPERATORS
<#
            foreach (var operation in operations) {
				var quantities = operation.Split('=', '*', '/');
				var res = quantities[0];
				var lhs = quantities[1];
				var rhs = quantities[2];
				var op = operation.Substring(operation.LastIndexOf(rhs) - 1, 1);
				var opName = opNames[op];
#>

        /// <summary>
        /// A <#= opName #> operator for <#= lhs #> and <#= rhs #> objects.
        /// </summary>
        /// <param name="lhs">Left-hand side <#= lhs #> object.</param>
        /// <param name="rhs">Right-hand side <#= rhs #> object.</param>
        /// <returns>Result of <#= opName #> between <paramref name="lhs"/> and <paramref name="rhs"/>, returned in quantity <#= res #>.</returns>
        public static <#= res #> operator <#= op #>(<#= lhs #> lhs, <#= rhs #> rhs)
        {
            return new <#= res #>(lhs.Amount <#= op #> rhs.Amount);
        }

        /// <summary>
        /// A <#= opName #> operator for <#= lhs #> and <#= rhs #> objects.
        /// </summary>
        /// <param name="lhs">Left-hand side <#= lhs #> object.</param>
        /// <param name="rhs">Right-hand side <#= rhs #> object (any object implementing IMeasure&lt;<#= rhs #>&gt; interface).</param>
        /// <returns>Result of <#= opName #> between <paramref name="lhs"/> and <paramref name="rhs"/>, returned in quantity <#= res #>.</returns>
        public static <#= res #> operator <#= op #>(<#= lhs #> lhs, IMeasure<<#= rhs #>> rhs)
        {
            return new <#= res #>(lhs.Amount <#= op #> rhs.StandardAmount);
        }
<#
            }
#>

        #endregion
    }
}
<#		
		}
    }
#>
<#+
    string ClassName
    {
        get { return (string)CallContext.GetData("MyParameter"); }
    }

    string DisplayName
    {
        get {
            var className = ClassName;
            var displayName = className.Substring(0, 1);
            for (var i = 1; i < className.Length; i++) {
                if (Char.IsUpper(className[i])) displayName += " ";
                displayName += className[i];
            }
            return displayName;
        }
    }
#>