<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
    if (!string.IsNullOrWhiteSpace(ClassName)) {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, "T4", "Quantities.csv");
        var lines=File.ReadAllLines(outputFilePath);

        var line = lines
                    .Where(s => !String.IsNullOrWhiteSpace(s) && !s.Trim().StartsWith("//"))
                    .SingleOrDefault(s => s.Substring(0, s.IndexOf(',')).Equals(ClassName));

        if (line != null) {
            var values=line.Split(',');
            var displayName = String.IsNullOrWhiteSpace(values[1]) ? values[0] : values[1];
			var displayNameLower = displayName.ToLowerInvariant();
            var length = Int32.Parse(values[2]);
            var mass = Int32.Parse(values[3]);
            var time = Int32.Parse(values[4]);
            var current = Int32.Parse(values[5]);
            var temperature = Int32.Parse(values[6]);
            var luminous = Int32.Parse(values[7]);
            var substance = Int32.Parse(values[8]);

            var stdUnit = values[9];
			var stdUnitSymbol = values[10];

            var loExp = Int32.Parse(values[11]);
            var hiExp = Int32.Parse(values[12]);
			
			var prefixes = new Dictionary<int, string> {
				{ -24, "Yocto" }, { -21, "Zepto" }, { -18, "Atto" }, { -15, "Femto" }, { -12, "Pico" }, { -9, "Nano" }, 
				{ -6, "Micro" }, { -3, "Milli" }, { -2, "Centi" }, { -1, "Deci" }, { 1, "Deka" }, { 2, "Hecto" }, 
				{ 3, "Kilo" }, { 6, "Mega" }, { 9, "Giga" }, { 12, "Tera" }, { 15, "Peta" }, { 18, "Exa" }, 
				{ 21, "Zetta" }, { 24, "Yotta" }};

			var selPrefixes = prefixes.Where(kv => loExp <= kv.Key && kv.Key <= hiExp).Select(kv => kv.Value).ToList();

            var unitSpecs = new List<Tuple<string, string, string>>();
            for (var i = 13; i < values.Length; i += 3) {
                unitSpecs.Add(Tuple.Create(values[i], values[i + 1], values[i + 2]));
            }
#>/*
 *  Copyright (c) 2011-2015, Cureos AB.
 *  All rights reserved.
 *  http://www.cureos.com
 *
 *	This file is part of CSUnits.
 *
 *  CSUnits is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  CSUnits is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with CSUnits. If not, see http://www.gnu.org/licenses/.
 */

/*
 * This file is auto-generated.
 */

namespace Cureos.Measures.Quantities
{
	using System;

#if SINGLE
	using AmountType = System.Single;
#elif DECIMAL
	using AmountType = System.Decimal;
#elif DOUBLE
	using AmountType = System.Double;
#endif

    /// <summary>
    /// Implementation of the <#= displayNameLower #> quantity
    /// </summary>
    public partial struct <#= ClassName #> : IQuantity<<#= ClassName #>>, IMeasure<<#= ClassName #>>
    {
        #region FIELDS

        private static readonly QuantityDimension dimension = new QuantityDimension(<#= length #>, <#= mass #>, <#= time #>, <#= current #>, <#= temperature #>, <#= luminous #>, <#= substance #>);

        public static readonly Unit<<#= ClassName #>> <#= stdUnit #> = new Unit<<#= ClassName #>>("<#= stdUnitSymbol #>");

<#
			foreach (var selPrefix in selPrefixes) {
#>
        public static readonly Unit<<#= ClassName #>> <#= selPrefix #><#= stdUnit #> = new Unit<<#= ClassName #>>(UnitPrefix.<#= selPrefix #>);
<#
			}
#>

<#
            foreach (var unitSpec in unitSpecs) {
                var unitName = unitSpec.Item1;
                var unitSymbol = unitSpec.Item2;
                var factor = unitSpec.Item3;
#>
        public static readonly Unit<<#= ClassName #>> <#= unitName #> = new Unit<<#= ClassName #>>("<#= unitSymbol #>", Factors.<#= factor #>);
<#
            }
#>

		private readonly AmountType amount;
		private readonly IUnit<<#= ClassName #>> unit;

        #endregion

		#region CONSTRUCTORS

		/// <summary>
		/// Initializes a measure to the specified amount and standard unit of the measured quantity
		/// </summary>
		/// <param name="amount">Measured amount in standard unit of the specified quantity</param>
		public <#= ClassName #>(double amount)
			: this(amount, default(<#= ClassName #>).StandardUnit)
		{
		}

		/// <summary>
		/// Initializes a measure to the specified amount and standard unit of the measured quantity
		/// </summary>
		/// <param name="amount">Measured amount in standard unit of the specified quantity</param>
		public <#= ClassName #>(float amount)
			: this(amount, default(<#= ClassName #>).StandardUnit)
		{
		}

		/// <summary>
		/// Initializes a measure to the specified amount and standard unit of the measured quantity
		/// </summary>
		/// <param name="amount">Measured amount in standard unit of the specified quantity</param>
		public <#= ClassName #>(decimal amount)
			: this(amount, default(<#= ClassName #>).StandardUnit)
		{
		}

		/// <summary>
		/// Initializes a measure to the specified amount and unit
		/// </summary>
		/// <param name="amount">Measured amount</param>
		/// <param name="iUnit">Unit of measure</param>
		/// <exception cref="ArgumentNullException">if the specified unit is null</exception>
		public <#= ClassName #>(double amount, IUnit<<#= ClassName #>> unit)
		{
			if (unit == null) throw new ArgumentNullException("unit");
#if DOUBLE
			this.amount = amount;
#else
			this.amount = (AmountType)amount;
#endif
			this.unit = unit;
		}

		/// <summary>
		/// Initializes a measure to the specified amount and unit
		/// </summary>
		/// <param name="iAmount">Measured amount</param>
		/// <param name="iUnit">Unit of measure</param>
		/// <exception cref="ArgumentNullException">if the specified unit is null</exception>
		public <#= ClassName #>(float amount, IUnit<<#= ClassName #>> unit)
		{
			if (unit == null) throw new ArgumentNullException("unit");
#if !DECIMAL
			this.amount = amount;
#else
			this.amount = (AmountType)amount;
#endif
			this.unit = unit;
		}

		/// <summary>
		/// Initializes a measure to the specified amount and unit
		/// </summary>
		/// <param name="iAmount">Measured amount</param>
		/// <param name="iUnit">Unit of measure</param>
		/// <exception cref="ArgumentNullException">if the specified unit is null</exception>
		public <#= ClassName #>(decimal amount, IUnit<<#= ClassName #>> unit)
		{
			if (unit == null) throw new ArgumentNullException("unit");
#if DECIMAL
			this.amount = amount;
#else
			this.amount = (AmountType)amount;
#endif
			this.unit = unit;
		}

        #endregion

        #region Implementation of IQuantity<<#= ClassName #>>

        /// <summary>
        /// Gets the physical dimension of the quantity in terms of SI units
        /// </summary>
        public QuantityDimension Dimension
        {
            get { return dimension; }
        }

        /// <summary>
        /// Gets the standard unit associated with the quantity
        /// </summary>
        IUnit IQuantity.StandardUnit
        {
            get { return this.StandardUnit; }
        }

        /// <summary>
        /// Gets the standard unit associated with the quantity
        /// </summary>
        public IUnit<<#= ClassName #>> StandardUnit
        {
            get { return <#= stdUnit #>; }
        }

        #endregion

		#region Implementation of IMeasure<<#= ClassName #>>

		/// <summary>
		/// Gets the measured amount in the <see cref="Unit">current unit of measure</see>
		/// </summary>
		public AmountType Amount
		{
			get { return this.amount; }
		}

	    /// <summary>
	    /// Gets the measured amount in the standard unit of measure for the <#= displayNameLower #> specified quantity</typeparam>
	    /// </summary>
	    public AmountType StandardAmount
	    {
	        get { return this.unit.AmountToStandardUnitConverter(this.amount); }
	    }

	    /// <summary>
	    /// Gets the unit of measure
	    /// </summary>
	    IUnit IMeasure.Unit
	    {
	        get { return this.Unit; }
	    }

	    /// <summary>
	    /// Gets the amount of this measure in the requested unit
	    /// </summary>
	    /// <param name="unit">Unit to which the measured amount should be converted</param>
	    /// <returns>Measured amount converted into <paramref name="iUnit">specified unit</paramref></returns>
	    AmountType IMeasure.GetAmount(IUnit unit)
	    {
	        if (unit == null) throw new ArgumentNullException("unit");
            if (!unit.Quantity.Equals(default(<#= ClassName #>))) throw new ArgumentException("Unit is not the same quantity as measure");
	        return unit.AmountFromStandardUnitConverter(this.StandardAmount);
	    }

	    /// <summary>
	    /// Gets a new unit specific measure based on this measure but in the <paramref name="iUnit">specified unit</paramref>
	    /// </summary>
	    /// <param name="unit">Unit in which the new measure should be specified</param>
	    /// <exception cref="ArgumentNullException">if specified unit is null or if specified unit is not of the 
	    /// <typeparamref name="Q">valid quantity</typeparamref></exception>
	    IMeasure IMeasure.this[IUnit unit]
	    {
	        get { return this[unit as IUnit<<#= ClassName #>>]; }
	    }

	    /// <summary>
		/// Gets the quantity-typed unit of measure
		/// </summary>
		public IUnit<<#= ClassName #>> Unit
		{
			get { return this.unit; }
		}

		/// <summary>
		/// Gets the amount of this measure in the requested unit
		/// </summary>
		/// <param name="unit">Unit to which the measured amount should be converted</param>
		/// <returns>Measured amount converted into <paramref name="unit">specified unit</paramref></returns>
		public AmountType GetAmount(IUnit<<#= ClassName #>> unit)
		{
			if (unit == null) throw new ArgumentNullException("unit");
			return unit.AmountFromStandardUnitConverter(this.StandardAmount);
		}

		/// <summary>
		/// Gets a new unit specific measure based on this measure but in the <paramref name="iUnit">specified unit</paramref>
		/// </summary>
		/// <param name="unit">Unit in which the new measure should be specified</param>
		IMeasure<<#= ClassName #>> IMeasure<<#= ClassName #>>.this[IUnit<<#= ClassName #>> unit]
		{
			get { return this[unit]; }
		}

		/// <summary>
		/// Gets a new unit specific measure based on this measure but in the <paramref name="unit">specified unit</paramref>
		/// </summary>
		/// <param name="unit">Unit in which the new measure should be specified</param>
		public <#= ClassName #> this[IUnit<<#= ClassName #>> unit]
		{
			get
			{
				if (unit == null) throw new ArgumentNullException("unit");
				return new <#= ClassName #>(this.GetAmount(unit), unit);
			}
		}

		/// <summary>
		/// Indicates whether the current object is equal to another object of the same type.
		/// </summary>
		/// <returns>
		/// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
		/// </returns>
		/// <param name="other">An object to compare with this object.</param>
		public bool Equals(IMeasure<<#= ClassName #>> other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;
			return this.amount.Equals(other.GetAmount(this.unit));
		}

        /// <summary>
        /// Indicates whether the current object is equal to another object of the same type.
        /// </summary>
        /// <returns>
        /// true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
        /// </returns>
        /// <param name="other">An object to compare with this object.</param>
        bool IEquatable<IMeasure>.Equals(IMeasure other)
        {
            if (other == null) throw new ArgumentNullException("other");
            if (!other.Unit.Quantity.Equals(default(<#= ClassName #>))) throw new ArgumentException("Measures are of different quantities");
            return this.amount.Equals(other.GetAmount(this.unit));
        }

	    /// <summary>
		/// Compares the current object with another object of the same type.
		/// </summary>
		/// <returns>
		/// A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
		///                     Value 
		///                     Meaning 
		///                     Less than zero 
		///                     This object is less than the <paramref name="other"/> parameter.
		///                     Zero 
		///                     This object is equal to <paramref name="other"/>. 
		///                     Greater than zero 
		///                     This object is greater than <paramref name="other"/>. 
		/// </returns>
		/// <param name="other">An object to compare with this object.</param>
		public int CompareTo(IMeasure<<#= ClassName #>> other)
		{
			if (other == null) throw new ArgumentNullException("other");
			return this.amount.CompareTo(other.GetAmount(this.unit));
		}

        /// <summary>
        /// Compares the current object with another object of the same type.
        /// </summary>
        /// <returns>
        /// A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
        /// </returns>
        /// <param name="other">An object to compare with this object.</param>
        int IComparable<IMeasure>.CompareTo(IMeasure other)
        {
            if (other == null) throw new ArgumentNullException("other");
            if (!other.Unit.Quantity.Equals(default(<#= ClassName #>))) throw new ArgumentException("Measures are of different quantities");
            return this.amount.CompareTo(other.GetAmount(this.unit));
        }

	    /// <summary>
		/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
		/// </summary>
		/// <returns>
		/// true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
		/// </returns>
		/// <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
		/// <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
		/// <filterpriority>2</filterpriority>
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != typeof(Measure<<#= ClassName #>>)) return false;
			return this.Equals((IMeasure<<#= ClassName #>>)obj);
		}

		/// <summary>
		/// Serves as a hash function for a particular type. 
		/// </summary>
		/// <returns>
		/// A hash code for the current <see cref="T:System.Object"/>.
		/// </returns>
		/// <filterpriority>2</filterpriority>
		public override int GetHashCode()
		{
			return this.StandardAmount.GetHashCode();
		}

		#endregion

        #region METHODS

        /// <summary>
        /// Returns the fully qualified type name of this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"/> containing a fully qualified type name.
        /// </returns>
        /// <filterpriority>2</filterpriority>
        public override string ToString()
        {
            return "<#= displayName #>";
        }

        #endregion
    }
}
<#		}
    }#>
<#+
    string ClassName
    {
        get { return (string)CallContext.GetData("MyParameter"); }
    }
#>