<TemplatesExport family="File Templates">
  <Template uid="35c32ccd-63fd-4411-8c44-133ce658304f" shortcut="" description="Quantity" text="// Copyright (c) 2011 Anders Gustafsson, Cureos AB.&#xD;&#xA;// All rights reserved. This software and the accompanying materials&#xD;&#xA;// are made available under the terms of the Eclipse Public License v1.0&#xD;&#xA;// which accompanies this distribution, and is available at&#xD;&#xA;// http://www.eclipse.org/legal/epl-v10.html&#xD;&#xA;&#xD;&#xA;namespace Cureos.Measures.Quantities&#xD;&#xA;{&#xD;&#xA;	/// &lt;summary&gt;&#xD;&#xA;	/// Implementation of the $DESCRIPTION$ quantity&#xD;&#xA;	/// &lt;/summary&gt;&#xD;&#xA;	public struct $QUANTITY$ : IQuantity&lt;$QUANTITY$&gt;&#xD;&#xA;	{&#xD;&#xA;		#region FIELDS&#xD;&#xA;		&#xD;&#xA;		private static readonly QuantityDimension _dimension = &#xD;&#xA;			(QuantityDimension.$Q1$ ^ $E1$) * (QuantityDimension.$Q2$ ^ $E2$);&#xD;&#xA;&#xD;&#xA;		public static readonly Unit&lt;$QUANTITY$&gt; $STDUNIT$ = new Unit&lt;$QUANTITY$&gt;(&quot;$SUSYMBOL$&quot;);&#xD;&#xA;		public static readonly Unit&lt;$QUANTITY$&gt; Kilo$STDUNIT$ = new Unit&lt;$QUANTITY$&gt;(UnitPrefix.Kilo);&#xD;&#xA;		public static readonly Unit&lt;$QUANTITY$&gt; Mega$STDUNIT$ = new Unit&lt;$QUANTITY$&gt;(UnitPrefix.Mega);&#xD;&#xA;		public static readonly Unit&lt;$QUANTITY$&gt; Giga$STDUNIT$ = new Unit&lt;$QUANTITY$&gt;(UnitPrefix.Giga);&#xD;&#xA;		public static readonly Unit&lt;$QUANTITY$&gt; Milli$STDUNIT$ = new Unit&lt;$QUANTITY$&gt;(UnitPrefix.Milli);&#xD;&#xA;		public static readonly Unit&lt;$QUANTITY$&gt; Micro$STDUNIT$ = new Unit&lt;$QUANTITY$&gt;(UnitPrefix.Micro);&#xD;&#xA;		public static readonly Unit&lt;$QUANTITY$&gt; Nano$STDUNIT$ = new Unit&lt;$QUANTITY$&gt;(UnitPrefix.Nano);&#xD;&#xA;&#xD;&#xA;		#endregion&#xD;&#xA;&#xD;&#xA;		#region Implementation of IQuantity&lt;$QUANTITY$&gt;&#xD;&#xA;&#xD;&#xA;		/// &lt;summary&gt;&#xD;&#xA;		/// Gets the physical dimension of the quantity in terms of SI units&#xD;&#xA;		/// &lt;/summary&gt;&#xD;&#xA;		public QuantityDimension Dimension&#xD;&#xA;		{&#xD;&#xA;			get { return _dimension; }&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		/// &lt;summary&gt;&#xD;&#xA;		/// Gets the standard unit associated with the quantity&#xD;&#xA;		/// &lt;/summary&gt;&#xD;&#xA;		IUnit IQuantity.StandardUnit&#xD;&#xA;		{&#xD;&#xA;			get { return StandardUnit; }&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		/// &lt;summary&gt;&#xD;&#xA;		/// Gets the standard unit associated with the quantity&#xD;&#xA;		/// &lt;/summary&gt;&#xD;&#xA;		public IUnit&lt;$QUANTITY$&gt; StandardUnit&#xD;&#xA;		{&#xD;&#xA;			get { return $STDUNIT$; }&#xD;&#xA;		}&#xD;&#xA;&#xD;&#xA;		#endregion&#xD;&#xA;&#xD;&#xA;        #region METHODS&#xD;&#xA;&#xD;&#xA;        /// &lt;summary&gt;&#xD;&#xA;        /// Returns the fully qualified type name of this instance.&#xD;&#xA;        /// &lt;/summary&gt;&#xD;&#xA;        /// &lt;returns&gt;&#xD;&#xA;        /// A &lt;see cref=&quot;T:System.String&quot;/&gt; containing a fully qualified type name.&#xD;&#xA;        /// &lt;/returns&gt;&#xD;&#xA;        /// &lt;filterpriority&gt;2&lt;/filterpriority&gt;&#xD;&#xA;        public override string ToString()&#xD;&#xA;        {&#xD;&#xA;            return GetType().Name;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #endregion&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <ProjectLanguageContext language="CSharp" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="DESCRIPTION" expression="constant(&quot;specific&quot;)" initialRange="0" />
      <Variable name="QUANTITY" expression="getFileNameWithoutExtension()" initialRange="-1" />
      <Variable name="Q1" expression="list(&quot;Length,Mass,Time,ElectricCurrent,Temperature,LuminousIntensity,AmountOfSubstance&quot;)" initialRange="0" />
      <Variable name="E1" expression="constant(&quot;1&quot;)" initialRange="0" />
      <Variable name="Q2" expression="list(&quot;Length,Mass,Time,ElectricCurrent,Temperature,LuminousIntensity,AmountOfSubstance&quot;)" initialRange="0" />
      <Variable name="E2" expression="constant(&quot;1&quot;)" initialRange="0" />
      <Variable name="STDUNIT" expression="constant(&quot;SpecificUnit&quot;)" initialRange="0" />
      <Variable name="SUSYMBOL" expression="constant(&quot;Unit&quot;)" initialRange="0" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="Class" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="True" />
    </CustomProperties>
  </Template>
</TemplatesExport>